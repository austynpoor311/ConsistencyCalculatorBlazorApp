@page "/"
@using ConsistencyCalculator.Models.Entities
@using ConsistencyCalculator.Shared.Services.Interfaces.Data
@using System.Linq
@using Microsoft.AspNetCore.Mvc.Rendering


<PageTitle>Player Statistics</PageTitle>

<div class="bg-white container">
    <h1 class="pb-4">Player Statistics</h1>
    <div class="row">
        <div class="col-lg-3">
            @if (TeamSelectListItems == null)
            {
            }
            else
            {
                <div class="select mb-3">
                    <select @onchange="TeamChanged" id="team">
                        @foreach (var team in TeamSelectListItems)
                        {
                            <option value="@team.Value">@team.Text</option>
                        }
                    </select>
                </div>
            }
        </div>
        <div class="col-lg-3">
            @if (PlayerSelectListItems == null)
            {
            }
            else
            {
                <div class="select mb-3">
                    <select @onchange="PlayerChanged" id="player">
                        @foreach (var item in PlayerSelectListItems)
                        {
                            if (item.Selected)
                            {
                                <option value="@item.Value" selected>@item.Text</option>
                            }
                            else
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        }
                    </select>
                </div>
            }
        </div>
        <div class="col-lg-3">
            @if (OpposingTeamSelectListItems == null)
            {
            }
            else
            {
                <div class="select mb-3">
                    <select @onchange="OpposingTeamChanged" id="opposingteams">
                        @foreach (var item in OpposingTeamSelectListItems)
                        {
                            if (item.Selected)
                            {
                                <option value="@item.Value" selected>@item.Text</option>
                            }
                            else
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        }
                    </select>
                </div>
            }
        </div>
    </div>



    @if (IsLoading)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h3 class="mb-3">Game Log</h3>

        <table class="table table-striped mb-1">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Home Team</th>
                    <th>Away Team</th>
                    <th>Score</th>
                    <th>MIN</th>
                    <th>FG</th>
                    <th>FG%</th>
                    <th>3PT</th>
                    <th>3P%</th>
                    <th>FT</th>
                    <th>FT%</th>
                    <th>REB</th>
                    <th>AST</th>
                    <th>BLK</th>
                    <th>STL</th>
                    <th>PF</th>
                    <th>TO</th>
                    <th>PTS</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var stat in GamePlayerStatistics)
                {
                    <tr>
                        <td>@stat.Game.GameDate.DayOfWeek @stat.Game.GameDate.ToString("MM/dd")</td>
                        <td>@stat.Game.HomeTeam.Name</td>
                        <td>@stat.Game.AwayTeam.Name</td>
                        <td>@stat.Game.Score</td>
                        <td>@stat.Minutes</td>
                        <td>@stat.FieldGoalsMade-@stat.FieldGoalAttempts</td>
                        <td>@stat.FieldGoalPercentage.ToString("0.0")</td>
                        <td>@stat.ThreePointersMade-@stat.ThreePointAttempts</td>
                        <td>@stat.ThreePointPercentage.ToString("0.0")</td>
                        <td>@stat.FreeThrowsMade-@stat.FreeThrowAttempts</td>
                        <td>@stat.FreeThrowPercentage.ToString("0.0")</td>
                        <td>@stat.Rebounds</td>
                        <td>@stat.Assists</td>
                        <td>@stat.Blocks</td>
                        <td>@stat.Steals</td>
                        <td>@stat.PlayerFouls</td>
                        <td>@stat.Turnovers</td>
                        <td>@stat.Points</td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="mb-3 pt-0">
            <label for="numberofgames">Number of Games:</label>
            <select value="@NumberOfGames" @onchange="UpdateNumberOfGames" name="numberofgames">
                @foreach (var item in LastGamesItems)
                {
                    <option value="@item.Value">@item.Text</option>
                }
            </select>
        </div>

        <h3 class="mt-3">Consistency</h3>
        <div class="mb-3">
            <div class="row">
                <div class="col-lg-3">
                    <div class="row mx-2">
                        <label class="px-0" for="rebounds">Rebounds:</label>
                        <input type="number" value="@Rebounds" @onchange="ReboundsChanged" />
                    </div>
                    <div class="row mx-2 mt-1">
                        <strong>@ReboundsPercent.ToString("0.0")% (@ReboundsHitCount / L @NumberOfGames)</strong>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="row mx-2">
                        <label for="assists">Assists:</label>
                        <input type="number" value="@Assists" @onchange="AssistsChanged" />
                    </div>
                    <div class="row mx-2 mt-1">
                        <strong>@AssistsPercent.ToString("0.0")% (@AssistsHitCount / L @NumberOfGames)</strong>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="row mx-2">
                        <label for="points">Points:</label>
                        <input type="number" value="@Points" @onchange="PointsChanged" />
                    </div>
                    <div class="row mx-2 mt-1">
                        <strong>@PointsPercent.ToString("0.0")% (@PointsHitCount / L @NumberOfGames)</strong>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="row mx-2">
                        <label for="threes">Threes:</label>
                        <input type="number" value="@Threes" @onchange="ThreesChanged" />
                    </div>
                    <div class="row mx-2 mt-1">
                        <strong>@ThreesPercent.ToString("0.0")% (@ThreesHitCount / L @NumberOfGames)</strong>
                    </div>
                </div>
            </div>
        </div>

        @*<div class="col-lg-6">
            <div class="row">
            Rebounds: @ReboundsPercent.ToString("0.0")% (@ReboundsHitCount / L @NumberOfGames)
            </div>
            <div class="row">
            Assists: @AssistsPercent.ToString("0.0")% (@AssistsHitCount / L @NumberOfGames)
            </div>
            <div class="row">
            Points: @PointsPercent.ToString("0.0")% (@PointsHitCount / L @NumberOfGames)
            </div>
            <div class="row">
            Threes: @ThreesPercent.ToString("0.0")% (@ThreesHitCount / L @NumberOfGames)
            </div>
            </div>*@
    }

</div>

@code {
    [Inject]
    public IPlayerDataService PlayerDataService { get; set; }

    [Inject]
    public ITeamDataService TeamDataService { get; set; }

    [Inject]
    public IGamePlayerStatisticsDataService GamePlayerStatisticsDataService { get; set; }

    public int PlayerId { get; set; }

    public int TeamId { get; set; }

    public int OpposingTeamId { get; set; } = 0;

    public List<Player> Players { get; set; } = new List<Player>();

    public List<Team> Teams { get; set; } = new List<Team>();

    public List<GamePlayerStatistics> GamePlayerStatistics { get; set; }

    public List<SelectListItem> PlayerSelectListItems { get; set; }

    public List<SelectListItem> TeamSelectListItems { get; set; }

    public List<SelectListItem> OpposingTeamSelectListItems { get; set; }

    public List<SelectListItem> LastGamesItems { get; set; }

    public double Points { get; set; } = 20.5;

    public double Assists { get; set; } = 5.5;

    public double Rebounds { get; set; } = 8.5;

    public double Threes { get; set; } = 1.5;

    public double AssistsPercent { get; set; }

    public double ReboundsPercent { get; set; }

    public double PointsPercent { get; set; }

    public double ThreesPercent { get; set; }

    public int AssistsHitCount { get; set; }

    public int ReboundsHitCount { get; set; }

    public int PointsHitCount { get; set; }

    public int ThreesHitCount { get; set; }

    public bool IsLoading { get; set; } = true;

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> ValueChanged { get; set; }

    public int NumberOfGames { get; set; } = 10;

    protected override async Task OnInitializedAsync()
    {
        LastGamesItems = Enumerable.Range(1, 20).Select(e => new SelectListItem
            {
                Value = e.ToString(),
                Text = e.ToString()
            }).ToList();

        Teams = (await TeamDataService.GetAllTeams()).ToList();
        Teams = Teams.OrderBy(p => p.Name).ToList();
        TeamId = Teams.Select(t => t.Id).FirstOrDefault();

        Players = (await PlayerDataService.GetPlayersByTeamId(TeamId)).ToList();
        Players = Players.OrderBy(p => p.FullName).ToList();
        PlayerId = Players.Select(p => p.Id).FirstOrDefault();



        PlayerSelectListItems = Players.Select(p => new SelectListItem
            {
                Value = p.Id.ToString(),
                Text = p.FullName
            }).ToList();

        TeamSelectListItems = Teams.Select(t => new SelectListItem
            {
                Value = t.Id.ToString(),
                Text = t.Name
            }).ToList();

        OpposingTeamSelectListItems = new List<SelectListItem>()
        {
            new SelectListItem
            {
                Value = "0",
                Text = "Vs Opponent"
            }
        };
        OpposingTeamSelectListItems.AddRange(Teams.Where(t => t.Id != TeamId).Select(t => new SelectListItem
            {
                Value = t.Id.ToString(),
                Text = t.Name
            }).ToList());

        UpdatePlayerStatistics();
        StateHasChanged();
    }

    async Task PlayerChanged(ChangeEventArgs e)
    {
        IsLoading = true;
        PlayerId = Int32.Parse(e.Value.ToString());
        PlayerSelectListItems = Players.Select(p => new SelectListItem
            {
                Value = p.Id.ToString(),
                Text = p.FullName,
                Selected = p.Id == PlayerId
            }).ToList();
        UpdatePlayerStatistics();
    }

    async Task TeamChanged(ChangeEventArgs e)
    {
        IsLoading = true;
        TeamId = Int32.Parse(e.Value.ToString());

        //default games back to 10
        NumberOfGames = 10;

        Players = (await PlayerDataService.GetPlayersByTeamId(TeamId)).ToList();
        Players = Players.OrderBy(p => p.FullName).ToList();
        PlayerId = Players.Select(p => p.Id).FirstOrDefault();

        PlayerSelectListItems = Players.Select(p => new SelectListItem
            {
                Value = p.Id.ToString(),
                Text = p.FullName,
                Selected = p.Id == PlayerId
            }).ToList();

        OpposingTeamId = 0;
        OpposingTeamSelectListItems = new List<SelectListItem>()
        {
            new SelectListItem
            {
                Value = "0",
                Text = "Vs Opponent",
                Selected = true
            }
        };
        OpposingTeamSelectListItems.AddRange(Teams.Where(t => t.Id != TeamId).Select(ot => new SelectListItem
            {
                Value = ot.Id.ToString(),
                Text = ot.Name
            }).ToList());

        StateHasChanged();
        UpdatePlayerStatistics();
    }

    async Task OpposingTeamChanged(ChangeEventArgs e)
    {
        IsLoading = true;
        NumberOfGames = 10;
        OpposingTeamId = Int32.Parse(e.Value.ToString());

        OpposingTeamSelectListItems = new List<SelectListItem>()
        {
            new SelectListItem
            {
                Value = "0",
                Text = "Vs Opponent"
            }
        };
        OpposingTeamSelectListItems.AddRange(Teams.Where(t => t.Id != TeamId).Select(ot => new SelectListItem
            {
                Value = ot.Id.ToString(),
                Text = ot.Name,
                Selected = ot.Id == OpposingTeamId
            }).ToList());
        StateHasChanged();
        UpdatePlayerStatistics();
    }

    async Task UpdatePlayerStatistics()
    {
        if (OpposingTeamId != 0)
        {
            GamePlayerStatistics = (await GamePlayerStatisticsDataService.GetGamePlayerStatisticsByPlayerAgainstTeam(PlayerId, OpposingTeamId)).ToList();
        }
        else
        {
            GamePlayerStatistics = (await GamePlayerStatisticsDataService.GetTopGamePlayerStatisticsByPlayerId(PlayerId, NumberOfGames)).ToList();
        }

        IsLoading = false;
        NumberOfGames = GamePlayerStatistics.Count;

        await PointsChanged(new ChangeEventArgs
            {
                Value = Points
            });

        await ReboundsChanged(new ChangeEventArgs
            {
                Value = Rebounds
            });

        await AssistsChanged(new ChangeEventArgs
            {
                Value = Assists
            });
        await ThreesChanged(new ChangeEventArgs
            {
                Value = Threes
            });
    }

    async Task ReboundsChanged(ChangeEventArgs e)
    {
        Rebounds = Double.Parse(e.Value.ToString());
        ReboundsHitCount = GamePlayerStatistics.Where(ps => ps.Rebounds >= Rebounds).Count();
        ReboundsPercent = ((double)ReboundsHitCount / (double)NumberOfGames) * 100;
        StateHasChanged();
    }

    async Task AssistsChanged(ChangeEventArgs e)
    {
        Assists = Double.Parse(e.Value.ToString());
        AssistsHitCount = GamePlayerStatistics.Where(ps => ps.Assists >= Assists).Count();
        AssistsPercent = ((double)AssistsHitCount / (double)NumberOfGames) * 100;
        StateHasChanged();
    }

    async Task PointsChanged(ChangeEventArgs e)
    {
        Points = Double.Parse(e.Value.ToString());
        PointsHitCount = GamePlayerStatistics.Where(ps => ps.Points >= Points).Count();
        PointsPercent = ((double)PointsHitCount / (double)NumberOfGames) * 100;
        StateHasChanged();
    }

    async Task ThreesChanged(ChangeEventArgs e)
    {
        Threes = Double.Parse(e.Value.ToString());
        ThreesHitCount = GamePlayerStatistics.Where(ps => ps.ThreePointersMade >= Threes).Count();
        ThreesPercent = ((double)ThreesHitCount / (double)NumberOfGames) * 100;
        StateHasChanged();
    }

    async Task UpdateNumberOfGames(ChangeEventArgs e)
    {
        IsLoading = true;
        NumberOfGames = Int32.Parse(e.Value.ToString());
        await UpdatePlayerStatistics();
    }
}

<style>
    :root {
        --background-gradient: linear-gradient(30deg, #f39c12 30%, #f1c40f);
        --gray: #818a99;
        --darkgray: #2c3e50;
    }

    select {
        /* Reset Select */
        appearance: none;
        outline: 0;
        border: 0;
        box-shadow: none;
        /* Personalize */
        flex: 1;
        padding: 0 1em;
        color: #fff;
        background-color: var(--gray);
        background-image: none;
        cursor: pointer;
    }
        /* Remove IE arrow */
        select::-ms-expand {
            display: none;
        }
    /* Custom Select wrapper */
    .select {
        position: relative;
        display: flex;
        width: 20em;
        height: 3em;
        border-radius: .25em;
        overflow: hidden;
    }
        /* Arrow */
        .select::after {
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            padding: 1em;
            background-color: #818a99;
            transition: .25s all ease;
            pointer-events: none;
        }
        /* Transition */
        .select:hover::after {
            color: #FFFFFF;
        }

    .section {
        scrollbar-width: thin;
    }
</style>


